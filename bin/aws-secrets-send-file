#!/bin/bash -e

# aws-secrets-send
#   Encrypt a file using a KMS key alias, then send it to an s3 bucket.
#   Prints out the latest object and version as json
#    e.g. { "object": "s3://my_aws_secrets-secrets/test-app/staging/secrets", "versionId": "rTTcOsJ1vM8OLfPqb9BwrwfIr8jyUyyu" }

die() {
    echo "$@"
    exit
}

which aws >/dev/null || die "aws-cli not found."

major=`aws --version 2>&1 | awk '{print $1}' | sed 's|aws-cli/1.\([0-9]*\).*$|\1|'`
[ ! -z "$major" ] && [ $major -lt 8 ] && die "aws-cli version needs to be >= 1.8."

app=$1
secrets_file=$2
remote_secrets_file=$3
env=$4
base=$5

usage="Usage: $0 <app> <local file> <remote file> <env> <base>"

[ -z "$app" ] && die "Missing app name. $usage";
[ -z "$secrets_file" ] && die "Missing secret file name. $usage";
[ -z "$remote_secrets_file" ] && die "Missing remote secret file name. $usage";
[ -z "$env" ] && die "Missing environment. $usage";
[ -z "$base" ] && die "Missing base name. $usage";

s3_bucket=$base-secrets
s3_key=$app/$env/$remote_secrets_file

tmp=`mktemp -d 2>/dev/null || mktemp -d -t 'astmpdir'`
encrypted=$tmp/data.enc

kms_alias=$s3_bucket
key_id=`aws kms list-aliases --output text --query "Aliases[?AliasName=='alias/$kms_alias'].TargetKeyId | [0]"`

aws kms encrypt \
    --key-id $key_id \
    --plaintext fileb://$secrets_file \
    --query CiphertextBlob \
    --output text \
    | python -m base64 -d \
    > $encrypted

version_id=`aws s3api put-object \
    --bucket $s3_bucket \
    --key $s3_key \
    --acl private \
    --body $encrypted \
    --output text \
    --query 'VersionId'`

rm -rf $tmp

# Print out the file and version id
echo "{ \"object\": \"s3://$s3_bucket/$s3_key\", \"versionId\": \"$version_id\" }"
