#!/bin/bash -e

# aws-secrets-init-resources
#
# Initialize a set of AWS resources to manage secret keys
#
die() {
    echo "$@"
    exit
}

which aws >/dev/null || die "aws-cli not found."

major=`aws --version 2>&1 | awk '{print $1}' | sed 's|aws-cli/1.\([0-9]*\).*$|\1|'`
[ ! -z "$major" ] && [ $major -lt 8 ] && die "aws-cli version needs to be >= 1.8."

# `base` is the base name for the config, used for the bucket name, keys, roles
#   It can be used with multiple apps, each with multiple envs, and each set of secrets
#   will have multiple versions
base=$AWS_SECRETS_BASE
[ -z "$base" ] && base=$1
[ -z "$base" ] && die "Usage: $0 <?base name> or set AWS_SECRETS_BASE"
[[ "$base" =~ ^[a-z0-9_]+$ ]] || die "The base name should consist only of a-z, 0-9 or _ charaters."

echo "Initializing resources: $base.";

# KMS alias
kms_alias=$base-secrets
found=`aws kms list-aliases --query "Aliases[?AliasName == 'alias/$kms_alias'] | [0].TargetKeyId" --output text`
if [ "$found" == "None" ]; then
    echo "Making a new key"
    key_id=`aws kms create-key --query 'KeyMetadata.KeyId' --output text`
    echo "Making new alias: $kms_alias, key: $key_id"
    aws kms create-alias --target-key-id $key_id --alias-name "alias/$kms_alias"
else
    echo "Found existing alias: $kms_alias, key: $found"
    key_id=$found
fi
key_arn=`aws kms list-keys --query "Keys[?KeyId == '$key_id' ] | [0].KeyArn" --output text`

# S3 bucket
bucket=$base-secrets
found=`aws s3api list-buckets --query "Buckets[?Name == '$bucket'] | [0].Name" --output text`
if [ "$found" == "None" ]; then
    echo "Creating bucket: $bucket"
    if [ ! -z "$AWS_SECRETS_BUCKET_REGION" ]; then
        BUCKET_CONSTRAINT="--create-bucket-configuration LocationConstraint=$AWS_SECRETS_BUCKET_REGION"
        BUCKET_REGION="--region $AWS_SECRETS_BUCKET_REGION"
    fi
    made=`aws s3api create-bucket --bucket $bucket --acl private $BUCKET_REGION $BUCKET_CONSTRAINT --output text`
    versioned=`aws s3api put-bucket-versioning --bucket $bucket --versioning-configuration Status=Enabled --output text`
else
    echo "Found existing bucket: $bucket"
fi

# IAM Role for instance profile
instancerole=$base-secrets-instances
instance_access_policy=$base-s3-read-secrets
instance_decrypt_policy=$base-s3-decrypt-secrets
found=`aws iam list-roles --query "Roles[?RoleName == '$instancerole'] | [0].RoleId" --output text`
if [ "$found" == "None" ]; then
    echo "Creating new role for instances: $instancerole"
    trustpolicy=`mktemp 2>/dev/null || mktemp -t 'astmpdir'`
    cat <<-TRUSTPOLICY >>$trustpolicy
{
  "Id": "key-$base-secrets-instance-trust-policy",
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Principal": {
          "Service" : [
            "ecs-tasks.amazonaws.com",
            "ec2.amazonaws.com"
          ]
      },
      "Action": "sts:AssumeRole"
    }
  ]
}
TRUSTPOLICY
    response=`aws iam create-role --role-name $instancerole --assume-role-policy-document file://$trustpolicy`
    rm $trustpolicy
    accesspolicy=`mktemp 2>/dev/null || mktemp -t 'astmpdir'`
    cat <<-ACCESSPOLICY >> $accesspolicy
{
  "Id": "key-$base-secrets-instance-access-policy",
  "Version": "2012-10-17",
  "Statement": [
    {
        "Effect" : "Allow",
        "Action" : [
          "s3:GetObject",
          "s3:GetObjectVersion"
        ],
        "Resource" : "arn:aws:s3:::$bucket/*"
    }
  ]
}
ACCESSPOLICY
    aws iam put-role-policy --role-name $instancerole --policy-name $instance_access_policy \
        --policy-document file://$accesspolicy
    rm $accesspolicy
    decryptpolicy=`mktemp 2>/dev/null || mktemp -t 'astmpdir'`
    cat <<-DECRYPTPOLICY >> $decryptpolicy
{
  "Version": "2012-10-17",
  "Id": "key-$base-secrets-instance-decrypt-policy",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": "kms:Decrypt",
      "Resource": "$key_arn"
    }
  ]
}
DECRYPTPOLICY
    aws iam put-role-policy --role-name $instancerole --policy-name $instance_decrypt_policy \
        --policy-document file://$decryptpolicy
    rm $decryptpolicy
else
    echo "Found existing role: $instancerole ($found)"
fi

# Instance profile for instances
instanceprofile=$base-secrets
found=`aws iam list-instance-profiles \
    --query "InstanceProfiles[?InstanceProfileName == '$instanceprofile'] | [0].InstanceProfileId" --output text`
if [ "$found" == "None" ]; then
    echo "Creating new instance profile: $instanceprofile."
    response=`aws iam create-instance-profile --instance-profile-name $instanceprofile`
    aws iam add-role-to-instance-profile --instance-profile-name $instanceprofile --role-name $instancerole
else
    echo "Found existing instance profile: $found"
fi

# Group for managing secrets
group=$base-manage-secrets
group_policy=$base-secrets-s3-read-write
group_encrypt_policy=$base-encrypt-secrets
found=`aws iam list-groups --query "Groups[?GroupName == '$group'] | [0].GroupName" --output text`
if [ "$found" == "None" ]; then
    echo "Creating group: $group."
    response=`aws iam create-group --group-name $group`
    accesspolicy=`mktemp 2>/dev/null || mktemp -t 'astmpdir'`
    cat <<-ACCESSPOLICY >> $accesspolicy
{
  "Id": "key-$base-secrets-group-access-policy",
  "Version": "2012-10-17",
  "Statement": [
    {
        "Effect" : "Allow",
        "Action" : [
          "s3:GetObject",
          "s3:GetObjectVersion",
          "s3:PutObject"
        ],
        "Resource" : "arn:aws:s3:::$bucket/*"
    }
  ]
}
ACCESSPOLICY
    aws iam put-group-policy --group-name $group --policy-name $group_policy \
        --policy-document file://$accesspolicy
    encryptpolicy=`mktemp 2>/dev/null || mktemp -t 'astmpdir'`
    cat <<-ENCRYPTPOLICY >> $encryptpolicy
{
  "Version": "2012-10-17",
  "Id": "key-$base-secrets-encrypt-policy",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [ "kms:Encrypt", "kms:Decrypt" ],
      "Resource": "$key_arn"
    }
  ]
}
ENCRYPTPOLICY
    aws iam put-group-policy --group-name $group --policy-name $group_encrypt_policy \
        --policy-document file://$encryptpolicy
    rm $encryptpolicy

else
    echo "Group $group exists."
fi

echo "Done!"
echo
echo
echo "Now what?"
echo
echo "# List users, add them to the group $group:"
echo "aws iam list-users --query 'Users[*].UserName'"
echo "aws iam add-user-to-group --group-name $group --user-name some_user"
echo "aws iam get-group --group-name $group"
echo
echo "# Create a file with an environment containing secret keys:"
echo "echo 'foo=bar$RANDOM' > aws-secrets"
echo
echo "# Encrypt and send it to s3, with env and base name:"
echo "aws-secrets-send my-app-name aws-secrets staging $base"
echo
echo "that will return {\"versionId\": \"some-version\"} to use on retrieve"
echo "(or you can set version-id as 'current' to get the latest version)"
echo
echo "# Retrieve it:"
echo "aws-secrets-get my-app-name some-version staging $base"
echo
echo "# Start an EC2 Instance"
echo "## Start an instance that can access the secrets:"
echo "aws ec2 run-instances --image-id ami-2d39803a --instance-type t2.nano --key-name some_aws_key \
--iam-instance-profile Name=$instanceprofile"
echo
echo "## View AWS credentials on the instance : "
echo "ssh ...instance ip..."
echo "curl -L http://169.254.169.254/latest/meta-data/iam/security-credentials/$instancerole"
echo
echo "## Copy aws-secrets-get to your instance and run it there to retrieve the secrets"
echo "scp aws-secrets-send ..instance ip.."
echo
echo "# Start an ECS Cluster"
echo "## Create your cluster using the $instancerole IAM role on the container instance"
